package frontman

import (
	"bytes"
	"crypto/x509"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
	"path/filepath"
	"runtime"
	"strings"
	"time"

	log "github.com/sirupsen/logrus"
	"github.com/troian/toml"
)

const (
	defaultLogLevel = "error"

	IOModeFile = "file"
	IOModeHTTP = "http"

	SenderModeWait     = "wait"
	SenderModeInterval = "interval"
)

var configAutogeneratedHeadline = []byte(
	`# This is an auto-generated config to connect with the cloudradar service
# To see all options of frontman run frontman -p

`)

var DefaultCfgPath string

type MinValuableConfig struct {
	IOMode      string `toml:"io_mode" comment:"\"file\" or \"http\" – where frontman gets checks to perform and post results"`
	HubURL      string `toml:"hub_url" commented:"true"`
	HubUser     string `toml:"hub_user" commented:"true"`
	HubPassword string `toml:"hub_password" commented:"true"`
}

type Frontman struct {
	Sleep float64 `toml:"sleep" comment:"delay before starting a new round of checks in seconds"`

	PidFile   string   `toml:"pid" comment:"path to pid file"`
	LogFile   string   `toml:"log" comment:"path to log file"`
	LogSyslog string   `toml:"log_syslog" comment:"\"local\" for local unix socket or URL e.g. \"udp://localhost:514\" for remote syslog server"`
	LogLevel  LogLevel `toml:"log_level"`

	IOMode                   string `toml:"io_mode" comment:"\"file\" or \"http\" – where frontman gets checks to perform and post results"`
	HubURL                   string `toml:"hub_url" commented:"true"`
	HubGzip                  bool   `toml:"hub_gzip" comment:"enable gzip when sending results to the HUB"`
	HubUser                  string `toml:"hub_user" commented:"true"`
	HubPassword              string `toml:"hub_password" commented:"true"`
	HubProxy                 string `toml:"hub_proxy" commented:"true"`
	HubProxyUser             string `toml:"hub_proxy_user" commented:"true"`
	HubProxyPassword         string `toml:"hub_proxy_password" commented:"true"`
	HubMaxOfflineBufferBytes int    `toml:"hub_max_offline_buffer_bytes" commented:"true"`

	ICMPTimeout            float64 `toml:"icmp_timeout" comment:"ICMP ping timeout in seconds"`
	NetTCPTimeout          float64 `toml:"net_tcp_timeout" comment:"TCP timeout in seconds"`
	HTTPCheckTimeout       float64 `toml:"http_check_time_out" comment:"HTTP time in seconds"`
	HTTPCheckMaxRedirects  int     `toml:"max_redirects" comment:"Limit the number of HTTP redirects to follow"`
	IgnoreSSLErrors        bool    `toml:"ignore_ssl_errors"`
	SSLCertExpiryThreshold int     `toml:"ssl_cert_expiry_threshold" comment:"Min days remain on the SSL cert to pass the check"`

	SenderMode         string  `toml:"sender_mode" comment:"\"wait\" – to post results to HUB after each round; \"interval\" – to post results to HUB by fixed interval"`
	SenderModeInterval float64 `toml:"sender_mode_interval" comment:"interval in seconds to post results to HUB server"`

	// Will be sent to hub as HostInfo
	SystemFields []string `toml:"system_fields" commented:"true"`

	// internal use
	httpTransport *http.Transport
	hubHttpClient *http.Client
	hostInfoSent  bool

	offlineResultsBuffer []Result

	rootCAs *x509.CertPool
	version string
}

func New(version string) *Frontman {
	var defaultLogPath string
	var rootCertsPath string

	ex, err := os.Executable()
	if err != nil {
		panic(err)
	}
	exPath := filepath.Dir(ex)

	switch runtime.GOOS {
	case "windows":
		DefaultCfgPath = filepath.Join(exPath, "./frontman.conf")
		defaultLogPath = filepath.Join(exPath, "./frontman.log")
	case "darwin":
		DefaultCfgPath = os.Getenv("HOME") + "/.frontman/frontman.conf"
		defaultLogPath = os.Getenv("HOME") + "/.frontman/frontman.log"
	default:
		rootCertsPath = "/etc/frontman/cacert.pem"
		DefaultCfgPath = "/etc/frontman/frontman.conf"
		defaultLogPath = "/var/log/frontman/frontman.log"
	}

	fm := &Frontman{
		version:                version,
		IOMode:                 "http",
		LogFile:                defaultLogPath,
		LogLevel:               defaultLogLevel,
		ICMPTimeout:            0.1,
		Sleep:                  30,
		SenderMode:             SenderModeWait,
		HTTPCheckMaxRedirects:  10,
		HTTPCheckTimeout:       15,
		NetTCPTimeout:          3,
		SSLCertExpiryThreshold: 7,
		SystemFields:           []string{},
		hostInfoSent:           false,
	}

	if rootCertsPath != "" {
		if _, err := os.Stat(rootCertsPath); err == nil {
			certPool := x509.NewCertPool()

			b, err := ioutil.ReadFile(rootCertsPath)
			if err != nil {
				log.Error("Failed to read cacert.pem: ", err.Error())
			} else {
				ok := certPool.AppendCertsFromPEM(b)
				if ok {
					fm.rootCAs = certPool
				}
			}
		}
	}
	return fm
}

func secToDuration(secs float64) time.Duration {
	return time.Duration(int64(float64(time.Second) * secs))
}

func (mvc *MinValuableConfig) ApplyEnv() {
	if val, ok := os.LookupEnv("FRONTMAN_HUB_URL"); ok {
		mvc.HubURL = val
	}

	if val, ok := os.LookupEnv("FRONTMAN_HUB_USER"); ok {
		mvc.HubUser = val
	}

	if val, ok := os.LookupEnv("FRONTMAN_HUB_PASSWORD"); ok {
		mvc.HubPassword = val
	}
}

// todo: merge it with (mvc *MinValuableConfig) ApplyEnv() when config separated from Frontman
func (fm *Frontman) ApplyEnv() {
	if val, ok := os.LookupEnv("FRONTMAN_HUB_URL"); ok {
		fm.HubURL = val
	}

	if val, ok := os.LookupEnv("FRONTMAN_HUB_USER"); ok {
		fm.HubUser = val
	}

	if val, ok := os.LookupEnv("FRONTMAN_HUB_PASSWORD"); ok {
		fm.HubPassword = val
	}
}

func (fm *Frontman) userAgent() string {
	if fm.version == "" {
		fm.version = "{undefined}"
	}
	parts := strings.Split(fm.version, "-")

	return fmt.Sprintf("Frontman v%s %s %s", parts[0], runtime.GOOS, runtime.GOARCH)
}

func (fm *Frontman) DumpConfigToml() string {
	buff := &bytes.Buffer{}
	enc := toml.NewEncoder(buff)
	err := enc.Encode(fm)

	if err != nil {
		log.Errorf("DumpConfigToml error: %s", err.Error())
		return ""
	}

	return buff.String()
}

func (fm *Frontman) ReadConfigFromFile(configFilePath string) error {
	_, err := os.Stat(configFilePath)
	if err != nil {
		return err
	}

	_, err = toml.DecodeFile(configFilePath, &fm)
	return err
}

func CreateDefaultConfigFile(configFilePath string) error {
	var err error

	if _, err = os.Stat(configFilePath); os.IsExist(err) {
		return fmt.Errorf("config already exists at path: %s", configFilePath)
	}

	var f *os.File
	if f, err = os.OpenFile(configFilePath, os.O_WRONLY|os.O_CREATE, 0644); err != nil {
		return fmt.Errorf("failed to create the default config file: '%s'", configFilePath)
	}

	defer func() {
		if err = f.Close(); err != nil {
			log.WithError(err).Errorf("failed to close config file: %s", configFilePath)
		}
	}()

	if _, err = f.Write(configAutogeneratedHeadline); err != nil {
		return fmt.Errorf("failed to write headline to config file")
	}

	cfg := MinValuableConfig{
		IOMode: "http",
	}

	cfg.ApplyEnv()

	err = toml.NewEncoder(f).Encode(&cfg)
	if err != nil {
		return fmt.Errorf("failed to encode config to file")
	}

	log.Infof("generated minimum valuable config to %s", configFilePath)

	return nil
}

func (fm *Frontman) Initialize() error {
	if fm.HubProxy != "" {
		if !strings.HasPrefix(fm.HubProxy, "http") {
			fm.HubProxy = "http://" + fm.HubProxy
		}
		_, err := url.Parse(fm.HubProxy)
		if err != nil {
			return fmt.Errorf("Failed to parse 'hub_proxy' URL")
		}
	}

	if fm.LogFile != "" {
		err := addLogFileHook(fm.LogFile, os.O_WRONLY|os.O_APPEND|os.O_CREATE, 0644)
		if err != nil {
			log.Error("Can't write logs to file: ", err.Error())
		}
	}

	if fm.LogSyslog != "" {
		err := addSyslogHook(fm.LogSyslog)
		if err != nil {
			log.Error("Can't set up syslog: ", err.Error())
		}
	}

	if fm.LogLevel != "" {
		log.SetLevel(fm.LogLevel.LogrusLevel())
	}

	return nil
}

// HandleConfig configures Frontman with parameters specified in file
// if config file not exists default one created in form of MinValuableConfig
// todo: this function must be removed once config is separated from Frontman
func HandleConfig(fm *Frontman, configFilePath string) error {
	err := fm.ReadConfigFromFile(configFilePath)
	if os.IsNotExist(err) {
		// this is ok
		err = CreateDefaultConfigFile(configFilePath)
		if err != nil {
			log.Fatal(err)
		}
	} else if err != nil {
		if strings.Contains(err.Error(), "cannot load TOML value of type int64 into a Go float") {
			return fmt.Errorf("Config load error: please use numbers with a decimal point for numerical values")
		}

		return fmt.Errorf("Config load error: %s", err.Error())
	}

	fm.ApplyEnv()
	return nil
}
